import datetime
from nextcord.ext import commands
from nextcord import Embed
import asyncio
from DataBase.active_systems import add_active_system, remove_active_system, get_active_system


class Systems(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def activate_system(self, ctx, system_name: str, duration_hours: int, embed_description: str,
                              embed_fields: dict):

        # Przelicz czas z godzin na minuty
        duration_minutes = duration_hours * 60

        # Sprawd≈∫, czy jakikolwiek system jest ju≈º aktywny na tym kanale
        existing_system = await get_active_system(ctx.channel.id)

        if existing_system:
            # Je≈õli istnieje, powiadom u≈ºytkownika i przerwij funkcjƒô
            embed = Embed(
                title="B≈ÇƒÖd",
                description=f"System **{existing_system['system_name']}** jest ju≈º aktywny na tym kanale. Czy na pewno chcesz go dezaktywowaƒá?",
                color=0xe74c3c  # Czerwony kolor embeda
            )
            message = await ctx.send(embed=embed)
            await message.add_reaction("‚úÖ")  # Reakcja "check"
            await message.add_reaction("‚ùå")  # Reakcja "x"

            def check(reaction, user):
                return user == ctx.author and str(reaction.emoji) in ["‚úÖ", "‚ùå"] and reaction.message.id == message.id

            try:
                reaction, user = await self.bot.wait_for("reaction_add", timeout=60.0, check=check)
            except asyncio.TimeoutError:  # Je≈õli czas minƒÖ≈Ç, usu≈Ñ wiadomo≈õƒá i przerwij funkcjƒô
                await message.delete()
                return
            else:
                if str(reaction.emoji) == "‚úÖ":
                    await remove_active_system(ctx.channel.id)  # Usu≈Ñ stary system
                elif str(reaction.emoji) == "‚ùå":
                    await message.delete()
                    return
            # Usu≈Ñ wiadomo≈õƒá
            await message.delete()

        current_time = datetime.datetime.utcnow()
        end_time = current_time + datetime.timedelta(hours=duration_hours)

        formatted_activation_time = current_time.replace(microsecond=0).isoformat(' ')
        formatted_end_time = end_time.replace(microsecond=0).isoformat(' ')

        await add_active_system(ctx.channel.id, system_name, duration_hours, formatted_activation_time,
                                formatted_end_time)

        embed = Embed(
            title=f"System {system_name} aktywny",
            description=embed_description,
            color=0x3498db  # Kolor embeda
        )

        for field_name, field_value in embed_fields.items():
            embed.add_field(name=field_name, value=field_value, inline=False)

        await ctx.send(embed=embed)

    @commands.command(name='2d20')
    async def two_d_twenty(self, ctx, duration: int):
        description = f"System **2d20** zosta≈Ç aktywowany na kanale **{ctx.channel.name}** na **{duration} godzin(y)**."
        fields = {
            "!k6": (
                "**U≈ºycie**: !Xk6\n"
                "- X - liczba rzut√≥w kostkƒÖ (np. !3k6 dla 3 rzut√≥w)\n"
                "Rzut jednƒÖ lub wiƒôcej kostkami k6, gdzie:\n"
                "'1' to 1 punkt, \n"
                "'2' to 2 punkty, \n"
                "'3' i '4' to 0 punkt√≥w, \n"
                "'5' i '6' to 1 punkt oraz Efekt.\n"
                "**Przyk≈Çad**: `!3k6` (3 rzuty k6)\n\n"
            ),
            "!k20": (
                "**U≈ºycie**: !Xk20;Y[;F]\n"
                "- X - liczba rzut√≥w kostkƒÖ (np. !3k20 dla 3 rzut√≥w)\n"
                "- Y - pr√≥g sukcesu\n"
                "- F (opcjonalne) - warto≈õƒá fokusu\n"
                "Rzut jednƒÖ lub wiƒôcej kostkami k20, gdzie: \n"
                "ka≈ºdy wynik r√≥wny lub ni≈ºszy Y jest sukcesem. \n"
                "'1' to krytyczny sukces (2 sukcesy), \n"
                "'20' to komplikacja (pora≈ºka).\n"
                "Je≈õli F jest dostƒôpne, wyniki r√≥wne lub ni≈ºsze F r√≥wnie≈º sƒÖ sukcesem.\n\n"
                "**Przyk≈Çad bez fokusu**: `!3k20;12` (3 rzuty k20, pr√≥g sukcesu 12)\n"
                "**Przyk≈Çad z fokusem**: `!3k20;12;5` (3 rzuty k20, pr√≥g sukcesu 12, fokus 5)\n\n"
                "Wsparcie merytoryczne: **piotrek_jay**\n"
                "Pomoc w rozwoju: **Alianora**\n"
                "B≈Çƒôdy w dzia≈Çaniu proszƒô zg≈Çaszaƒá do: **kucu**"
            )
        }
        await self.activate_system(ctx, '2d20', duration, description, fields)

    @commands.command(name='SWAE')
    async def swae(self, ctx, duration: int):
        description = f"System **SWAE** zosta≈Ç aktywowany na kanale **{ctx.channel.name}** na **{duration} godzin(y)**."
        fields = {
            "!(test|t)": (
                "**U≈ºycie**: !(test|t) XkY(+Z/-Z)\n"
                "- !(test|t) - komenda do wykonania rzutu na test (mo≈ºna wpisaƒá !test lub !t)\n"
                "- X - Opcjonalna liczba rzut√≥w kostkƒÖ (domy≈õlnie 1)\n"
                "- Y - Typ kostki (np. 6 dla k6, 10 dla k10, itp.)\n"
                "- (+Z/-Z) - Opcjonalny modyfikator, kt√≥ry zostanie dodany/odjƒôty od wyniku\n"
                "Rzuty kostkƒÖ typu Y, ilo≈õƒá ko≈õci X, dodatkowo rzuca ko≈õciƒÖ figury (k6) i zwraca lepszy wynik.\n"
                "W te≈õcie mamy mo≈ºliwo≈õƒá przerzutu u≈ºywajƒÖc reakcji üîÑ w odpowiedzi na rzut.\n"
                "**Przyk≈Çad**: `!(test|t) 2k8+2` (2 rzut k8 plus modyfikator +2)\n\n"
            ),
            "!(damage|d|o)": (
                "**U≈ºycie**: !(damage|d|o) kY;Z(+Z/-Z) lub !(damage|d|o) XkY(+Z/-Z)\n"
                "- !(damage|d|o) - komenda do wykonania rzutu na obra≈ºenia (mo≈ºna wpisaƒá !damage, !d lub !o)\n"
                "- X - Opcjonalna liczba rzut√≥w kostkƒÖ (domy≈õlnie 1)\n"
                "- Y - Typ pierwszej kostki (np. 6 dla k6, 12 dla k12, itp.)\n"
                "- Z - Opcjonalna, dodatkowa kostka, mo≈ºe byƒá powtarzana wielokrotnie (np. ;8;4 dla dodatkowych rzut√≥w k8 i k4)\n"
                "- (+A/-A) - Opcjonalny modyfikator, kt√≥ry zostanie dodany/odejmuje wyniku\n"
                "Rzuty kostkami okre≈õlonymi przez Y oraz opcjonalne Z, a nastƒôpnie sumuje wyniki i dodaje/odejmuje modyfikator.\n"
                "lub\n"
                "Rzuty kostkƒÖ typu Y, ilo≈õƒá ko≈õci X oraz opcjonalne Z, a nastƒôpnie sumuje wyniki i dodaje/odejmuje modyfikator.\n"
                "**Przyk≈Çad**: `!(damage|d|o) k12;6;6+2` (Rzuty k12, k6, k6, suma plus modyfikator +2)\n"
                "**Przyk≈Çad 2**: `!(damage|d|o) 2k10+2` (2 rzuty k10 plus modyfikator +2)\n\n"
                "Wsparcie merytoryczne: **piotrek_jay**\n"
                "B≈Çƒôdy w dzia≈Çaniu proszƒô zg≈Çaszaƒá do: **kucu**"
            )
        }
        await self.activate_system(ctx, 'SWAE', duration, description, fields)


def setup(bot):
    bot.add_cog(Systems(bot))
